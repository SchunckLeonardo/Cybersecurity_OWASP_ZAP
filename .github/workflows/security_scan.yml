name: OWASP ZAP Security Scan

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  zap_scan:
    runs-on: ubuntu-latest
    name: Scan de Segurança com OWASP ZAP

    steps:
      - name: 1. Checkout do código
        uses: actions/checkout@v4

      - name: 2. Setup do Java (JDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: 3. Build da aplicação
        run: |
          chmod +x gradlew
          ./gradlew build -x test

      - name: 4. Inicia a aplicação em background
        run: |
          nohup java -jar build/libs/*.jar > app.log 2>&1 &
          echo $! > app.pid
          echo "PID da aplicação: $(cat app.pid)"

      - name: 5. Aguarda aplicação inicializar
        run: |
          echo "Aguardando a aplicação iniciar..."
          max_attempts=60
          attempt=0
          
          while [ $attempt -lt $max_attempts ]; do
            if curl -sf http://localhost:8080/actuator/health >/dev/null 2>&1 || \
               curl -sf http://localhost:8080 >/dev/null 2>&1; then
              echo "✓ Aplicação está no ar!"
              break
            fi
          
            attempt=$((attempt + 1))
            echo "Tentativa $attempt/$max_attempts..."
            sleep 2
          
            if [ $attempt -eq $max_attempts ]; then
              echo "✗ Erro: Aplicação não inicializou no tempo esperado"
              echo "Logs da aplicação:"
              cat app.log
              exit 1
            fi
          done

      - name: 6. Verificação da API Docs
        run: |
          echo "Verificando documentação da API..."
          if curl -sf http://localhost:8080/v3/api-docs >/dev/null; then
            echo "✓ Documentação da API está acessível!"
            curl -s http://localhost:8080/v3/api-docs | jq . || true
          else
            echo "✗ Aviso: Documentação não encontrada em /v3/api-docs"
            echo "Tentando outros endpoints comuns..."
            curl -s http://localhost:8080/swagger-ui.html || true
            curl -s http://localhost:8080/api-docs || true
          fi

      - name: 7. OWASP ZAP API Scan
        uses: zaproxy/action-api-scan@v0.5.0
        with:
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'http://host.docker.internal:8080/v3/api-docs'
          format: 'openapi'
          fail_action: false
          cmd_options: '-a -r zap_report.html -J zap_report.json -w zap_report.md'
        continue-on-error: true

      - name: 8. Verificar se relatórios foram gerados
        if: always()
        run: |
          echo "Verificando arquivos gerados:"
          ls -lah zap_report.* 2>/dev/null || echo "Nenhum relatório encontrado"
          
          if [ -f "zap_report.json" ]; then
            echo "Conteúdo do JSON (primeiras linhas):"
            head -n 50 zap_report.json
          fi

      - name: 9. Upload do Relatório ZAP
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: relatorio-zap-seguranca
          path: |
            zap_report.*
            app.log
          if-no-files-found: warn

      - name: 10. Análise de Vulnerabilidades
        if: always()
        run: |
          if [ ! -f "zap_report.json" ]; then
            echo "⚠️ Relatório JSON não foi gerado. Pulando análise."
            exit 0
          fi
          
          # Instala jq se necessário
          command -v jq >/dev/null 2>&1 || sudo apt-get update && sudo apt-get install -y jq
          
          # Verifica estrutura do JSON
          echo "Estrutura do relatório:"
          jq 'keys' zap_report.json
          
          # Conta alertas por severidade
          high_alerts=$(jq '[.site[]?.alerts[]? | select(.riskcode == "3" or .risk == "High")] | length' zap_report.json 2>/dev/null || echo "0")
          medium_alerts=$(jq '[.site[]?.alerts[]? | select(.riskcode == "2" or .risk == "Medium")] | length' zap_report.json 2>/dev/null || echo "0")
          low_alerts=$(jq '[.site[]?.alerts[]? | select(.riskcode == "1" or .risk == "Low")] | length' zap_report.json 2>/dev/null || echo "0")
          info_alerts=$(jq '[.site[]?.alerts[]? | select(.riskcode == "0" or .risk == "Informational")] | length' zap_report.json 2>/dev/null || echo "0")
          
          echo "═══════════════════════════════════════"
          echo "📊 RESUMO DAS VULNERABILIDADES"
          echo "═══════════════════════════════════════"
          echo "🔴 Risco Alto:    $high_alerts"
          echo "🟠 Risco Médio:   $medium_alerts"
          echo "🟡 Risco Baixo:   $low_alerts"
          echo "ℹ️  Informacional: $info_alerts"
          echo "═══════════════════════════════════════"
          
          # Lista vulnerabilidades de alto risco
          if [ "$high_alerts" -gt 0 ]; then
            echo ""
            echo "🔴 VULNERABILIDADES DE ALTO RISCO:"
            jq -r '.site[]?.alerts[]? | select(.riskcode == "3" or .risk == "High") | "  - \(.name) (\(.count) ocorrências)"' zap_report.json 2>/dev/null || true
          fi
          
          # Lista vulnerabilidades de médio risco
          if [ "$medium_alerts" -gt 0 ]; then
            echo ""
            echo "🟠 VULNERABILIDADES DE MÉDIO RISCO:"
            jq -r '.site[]?.alerts[]? | select(.riskcode == "2" or .risk == "Medium") | "  - \(.name) (\(.count) ocorrências)"' zap_report.json 2>/dev/null || true
          fi
          
          # Define critério de falha
          total_critical=$((high_alerts + medium_alerts))
          
          if [ "$total_critical" -gt 0 ]; then
            echo ""
            echo "❌ Build FALHOU: $total_critical vulnerabilidade(s) crítica(s) encontrada(s)!"
            exit 1
          else
            echo ""
            echo "✅ Build APROVADO: Nenhuma vulnerabilidade crítica encontrada!"
          fi

      - name: 11. Finalizar aplicação
        if: always()
        run: |
          if [ -f app.pid ]; then
            echo "Finalizando aplicação..."
            kill $(cat app.pid) 2>/dev/null || true
          fi