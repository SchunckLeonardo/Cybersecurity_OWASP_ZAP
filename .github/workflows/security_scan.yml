name: Security Scan with OWASP ZAP

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Setup Java 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Dar permissão de execução ao gradlew
        run: chmod +x gradlew

      - name: Build aplicação Spring Boot
        run: ./gradlew build -x test

      - name: Iniciar aplicação em background
        run: |
          ./gradlew bootRun &
          echo $! > app.pid
          echo "Aguardando aplicação iniciar..."
          sleep 30

      - name: Verificar se aplicação está rodando
        run: |
          curl -f http://localhost:8080/actuator/health || exit 1
          echo "Aplicação está respondendo!"

      - name: Executar OWASP ZAP Baseline Scan
        continue-on-error: true
        run: |
          docker pull ghcr.io/zaproxy/zaproxy:stable
          docker run -v $(pwd):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t http://host.docker.internal:8080 \
            -r zap-baseline-report.html -x zap-baseline-report.xml

      - name: Executar OWASP ZAP Full Scan
        run: |
          docker run --network="host" -v $(pwd):/zap/wrk/:rw \
            -t ghcr.io/zaproxy/zaproxy:stable bash -c \
            "zap.sh -cmd -quickurl http://localhost:8080 -quickprogress -quickout /zap/wrk/zap-report.html"

      - name: Analisar resultados do ZAP
        id: analyze_zap
        run: |
          if [ -f zap-report.html ]; then
            echo "Relatório gerado com sucesso"
          
            # Extrair informações do relatório
            HIGH_ALERTS=$(grep -o "riskcode=\"3\"" zap-report.html | wc -l || echo "0")
            CRITICAL_ALERTS=$(grep -o "riskcode=\"4\"" zap-report.html | wc -l || echo "0")
            MEDIUM_ALERTS=$(grep -o "riskcode=\"2\"" zap-report.html | wc -l || echo "0")
            LOW_ALERTS=$(grep -o "riskcode=\"1\"" zap-report.html | wc -l || echo "0")
            INFO_ALERTS=$(grep -o "riskcode=\"0\"" zap-report.html | wc -l || echo "0")
          
            TOTAL_ALERTS=$((HIGH_ALERTS + CRITICAL_ALERTS + MEDIUM_ALERTS + LOW_ALERTS + INFO_ALERTS))
          
            echo "=== RESUMO DA ANÁLISE DE SEGURANÇA ==="
            echo "Total de alertas: $TOTAL_ALERTS"
            echo "Críticos: $CRITICAL_ALERTS"
            echo "Altos: $HIGH_ALERTS"
            echo "Médios: $MEDIUM_ALERTS"
            echo "Baixos: $LOW_ALERTS"
            echo "Informativos: $INFO_ALERTS"
            echo "======================================"
          
            # Exportar para variáveis de ambiente
            echo "high_alerts=$HIGH_ALERTS" >> $GITHUB_OUTPUT
            echo "critical_alerts=$CRITICAL_ALERTS" >> $GITHUB_OUTPUT
            echo "total_alerts=$TOTAL_ALERTS" >> $GITHUB_OUTPUT
          
            # Falhar se houver vulnerabilidades críticas ou altas
            if [ "$CRITICAL_ALERTS" -gt 0 ] || [ "$HIGH_ALERTS" -gt 0 ]; then
              echo "❌ FALHA: Vulnerabilidades críticas ou altas detectadas!"
              exit 1
            fi
          else
            echo "Erro: Relatório não foi gerado"
            exit 1
          fi

      - name: Upload relatório ZAP como artefato
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-security-report
          path: |
            zap-report.html
            zap-report.xml
          retention-days: 30

      - name: Parar aplicação
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
          fi

      - name: Comentar PR com resultados
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const highAlerts = '${{ steps.analyze_zap.outputs.high_alerts }}';
            const criticalAlerts = '${{ steps.analyze_zap.outputs.critical_alerts }}';
            const totalAlerts = '${{ steps.analyze_zap.outputs.total_alerts }}';
            
            const comment = `## 🔒 Relatório de Segurança - OWASP ZAP
            
            | Severidade | Quantidade |
            |------------|------------|
            | 🔴 Crítico | ${criticalAlerts} |
            | 🟠 Alto    | ${highAlerts} |
            | **Total**  | **${totalAlerts}** |
            
            ${parseInt(criticalAlerts) + parseInt(highAlerts) > 0 ? '❌ **Pipeline falhou devido a vulnerabilidades críticas/altas**' : '✅ Nenhuma vulnerabilidade crítica detectada'}
            
            📊 Baixe o relatório completo nos artefatos do workflow.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });