name: Security Scan with OWASP ZAP

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Setup Java 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Dar permissão de execução ao gradlew
        run: chmod +x gradlew

      - name: Build aplicação Spring Boot
        run: ./gradlew build -x test

      - name: Iniciar aplicação em background
        run: |
          ./gradlew bootRun &
          echo $! > app.pid
          echo "Aguardando aplicação iniciar..."
          sleep 30

      - name: Verificar se aplicação está rodando
        run: |
          curl -f http://localhost:8080/actuator/health || exit 1
          echo "Aplicação está respondendo!"

      - name: Executar OWASP ZAP Full Scan
        continue-on-error: true
        run: |
          docker run \
            -v $(pwd):/zap/wrk/:rw \
            --network="host" \
            --user $(id -u):$(id -g) \
            -t ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py \
              -t http://127.0.0.1:8080 \
              -p 8090 \
              -r zap-report.html \
              -x zap-report.xml

      - name: Analisar resultados do ZAP
        id: analyze
        run: |
           echo "=== ANÁLISE DE SEGURANÇA OWASP ZAP ==="
           
           # Verifica se o relatório XML foi gerado
           if [ ! -f "zap-baseline-report.xml" ]; then
             echo "⚠️ Relatório XML não encontrado. Verificando HTML..."
             if [ -f "zap-baseline-report.html" ]; then
               echo "Relatório HTML encontrado, mas análise será limitada."
             else
               echo "❌ Nenhum relatório foi gerado!"
               exit 1
             fi
           fi
           
           # Analisa o XML se disponível
           if [ -f "zap-baseline-report.xml" ]; then
             # Conta alertas por severidade usando xmllint se disponível
             if command -v xmllint &> /dev/null; then
               CRITICAL=$(xmllint --xpath 'count(//alertitem[riskcode="4"])' zap-baseline-report.xml 2>/dev/null || echo "0")
               HIGH=$(xmllint --xpath 'count(//alertitem[riskcode="3"])' zap-baseline-report.xml 2>/dev/null || echo "0")
               MEDIUM=$(xmllint --xpath 'count(//alertitem[riskcode="2"])' zap-baseline-report.xml 2>/dev/null || echo "0")
               LOW=$(xmllint --xpath 'count(//alertitem[riskcode="1"])' zap-baseline-report.xml 2>/dev/null || echo "0")
               INFO=$(xmllint --xpath 'count(//alertitem[riskcode="0"])' zap-baseline-report.xml 2>/dev/null || echo "0")
             else
               # Fallback usando grep
               CRITICAL=$(grep -c 'riskcode>4<' zap-baseline-report.xml || echo "0")
               HIGH=$(grep -c 'riskcode>3<' zap-baseline-report.xml || echo "0")
               MEDIUM=$(grep -c 'riskcode>2<' zap-baseline-report.xml || echo "0")
               LOW=$(grep -c 'riskcode>1<' zap-baseline-report.xml || echo "0")
               INFO=$(grep -c 'riskcode>0<' zap-baseline-report.xml || echo "0")
             fi
           else
             # Fallback para HTML
             CRITICAL=$(grep -o 'High (High)' zap-baseline-report.html | wc -l || echo "0")
             HIGH=$(grep -o 'Medium (High)' zap-baseline-report.html | wc -l || echo "0")
             MEDIUM=$(grep -o 'Medium (Medium)' zap-baseline-report.html | wc -l || echo "0")
             LOW=$(grep -o 'Low (Low)' zap-baseline-report.html | wc -l || echo "0")
             INFO=$(grep -o 'Informational' zap-baseline-report.html | wc -l || echo "0")
           fi
           
           TOTAL=$((CRITICAL + HIGH + MEDIUM + LOW + INFO))
           
           echo "📊 RESUMO DE VULNERABILIDADES"
           echo "======================================"
           echo "🔴 Críticas:      $CRITICAL"
           echo "🟠 Altas:         $HIGH"
           echo "🟡 Médias:        $MEDIUM"
           echo "🔵 Baixas:        $LOW"
           echo "⚪ Informativas:  $INFO"
           echo "────────────────────────────────────"
           echo "📈 TOTAL:         $TOTAL"
           echo "======================================"
           
           # Exporta para outputs
           echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
           echo "high=$HIGH" >> $GITHUB_OUTPUT
           echo "medium=$MEDIUM" >> $GITHUB_OUTPUT
           echo "low=$LOW" >> $GITHUB_OUTPUT
           echo "info=$INFO" >> $GITHUB_OUTPUT
           echo "total=$TOTAL" >> $GITHUB_OUTPUT
           
           # Determina se deve falhar
           if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
             echo ""
             echo "❌ PIPELINE FALHOU!"
             echo "Motivo: $CRITICAL vulnerabilidade(s) crítica(s) e $HIGH alta(s) detectada(s)"
             echo ""
             exit 1
           else
             echo ""
             echo "✅ PIPELINE APROVADO!"
             echo "Nenhuma vulnerabilidade crítica ou alta detectada."
             echo ""
           fi

      - name: Upload relatório ZAP como artefato
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-security-report
          path: |
            zap-report.html
            zap-report.xml
          retention-days: 30
          if-no-files-found: ignore # Evita erro se os arquivos não forem criados

      - name: Parar aplicação
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
          fi

      - name: Comentar PR com resultados
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          script: |
            const highAlerts = '${{ steps.analyze_zap.outputs.high_alerts || 0 }}';
            const totalAlerts = '${{ steps.analyze_zap.outputs.total_alerts || 0 }}';
            
            const comment = `## 🔒 Relatório de Segurança - OWASP ZAP
            
            | Severidade | Quantidade |
            |------------|------------|
            | 🟠 Alto    | ${highAlerts} |
            | **Total** | **${totalAlerts}** |
            
            ${parseInt(highAlerts) > 0 ? '❌ **Pipeline falhou devido a vulnerabilidades altas**' : '✅ Nenhuma vulnerabilidade de nível alto detectada'}
            
            📊 Baixe o relatório completo nos artefatos do workflow.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });